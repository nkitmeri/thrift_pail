/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftpailtest.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Tweet implements org.apache.thrift.TBase<Tweet, Tweet._Fields>, java.io.Serializable, Cloneable, Comparable<Tweet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Tweet");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField URL_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("urlEntities", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField MENTION_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("mentionEntities", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField HASHTAG_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("hashtagEntities", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField NAMED_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("namedEntities", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TweetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TweetTupleSchemeFactory());
  }

  public long id; // required
  public User user; // required
  /**
   * 
   * @see TweetType
   */
  public TweetType type; // required
  public Date date; // required
  public Text text; // optional
  public List<URLEntity> urlEntities; // optional
  public List<MentionEntity> mentionEntities; // optional
  public List<HashtagEntity> hashtagEntities; // optional
  public List<NamedEntity> namedEntities; // optional
  public Language language; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER((short)2, "user"),
    /**
     * 
     * @see TweetType
     */
    TYPE((short)3, "type"),
    DATE((short)4, "date"),
    TEXT((short)6, "text"),
    URL_ENTITIES((short)7, "urlEntities"),
    MENTION_ENTITIES((short)8, "mentionEntities"),
    HASHTAG_ENTITIES((short)9, "hashtagEntities"),
    NAMED_ENTITIES((short)10, "namedEntities"),
    LANGUAGE((short)11, "language");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER
          return USER;
        case 3: // TYPE
          return TYPE;
        case 4: // DATE
          return DATE;
        case 6: // TEXT
          return TEXT;
        case 7: // URL_ENTITIES
          return URL_ENTITIES;
        case 8: // MENTION_ENTITIES
          return MENTION_ENTITIES;
        case 9: // HASHTAG_ENTITIES
          return HASHTAG_ENTITIES;
        case 10: // NAMED_ENTITIES
          return NAMED_ENTITIES;
        case 11: // LANGUAGE
          return LANGUAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TEXT,_Fields.URL_ENTITIES,_Fields.MENTION_ENTITIES,_Fields.HASHTAG_ENTITIES,_Fields.NAMED_ENTITIES,_Fields.LANGUAGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TweetType.class)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Date.class)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Text.class)));
    tmpMap.put(_Fields.URL_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("urlEntities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "URLEntities")));
    tmpMap.put(_Fields.MENTION_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("mentionEntities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "MentionEntities")));
    tmpMap.put(_Fields.HASHTAG_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("hashtagEntities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "HashtagEntities")));
    tmpMap.put(_Fields.NAMED_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("namedEntities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "NamedEntities")));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Language.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Tweet.class, metaDataMap);
  }

  public Tweet() {
  }

  public Tweet(
    long id,
    User user,
    TweetType type,
    Date date)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.user = user;
    this.type = type;
    this.date = date;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Tweet(Tweet other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetUser()) {
      this.user = new User(other.user);
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetDate()) {
      this.date = new Date(other.date);
    }
    if (other.isSetText()) {
      this.text = new Text(other.text);
    }
    if (other.isSetUrlEntities()) {
      this.urlEntities = other.urlEntities;
    }
    if (other.isSetMentionEntities()) {
      this.mentionEntities = other.mentionEntities;
    }
    if (other.isSetHashtagEntities()) {
      this.hashtagEntities = other.hashtagEntities;
    }
    if (other.isSetNamedEntities()) {
      this.namedEntities = other.namedEntities;
    }
    if (other.isSetLanguage()) {
      this.language = new Language(other.language);
    }
  }

  public Tweet deepCopy() {
    return new Tweet(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.user = null;
    this.type = null;
    this.date = null;
    this.text = null;
    this.urlEntities = null;
    this.mentionEntities = null;
    this.hashtagEntities = null;
    this.namedEntities = null;
    this.language = null;
  }

  public long getId() {
    return this.id;
  }

  public Tweet setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public User getUser() {
    return this.user;
  }

  public Tweet setUser(User user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  /**
   * 
   * @see TweetType
   */
  public TweetType getType() {
    return this.type;
  }

  /**
   * 
   * @see TweetType
   */
  public Tweet setType(TweetType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public Date getDate() {
    return this.date;
  }

  public Tweet setDate(Date date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public Text getText() {
    return this.text;
  }

  public Tweet setText(Text text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public int getUrlEntitiesSize() {
    return (this.urlEntities == null) ? 0 : this.urlEntities.size();
  }

  public java.util.Iterator<URLEntity> getUrlEntitiesIterator() {
    return (this.urlEntities == null) ? null : this.urlEntities.iterator();
  }

  public void addToUrlEntities(URLEntity elem) {
    if (this.urlEntities == null) {
      this.urlEntities = new ArrayList<URLEntity>();
    }
    this.urlEntities.add(elem);
  }

  public List<URLEntity> getUrlEntities() {
    return this.urlEntities;
  }

  public Tweet setUrlEntities(List<URLEntity> urlEntities) {
    this.urlEntities = urlEntities;
    return this;
  }

  public void unsetUrlEntities() {
    this.urlEntities = null;
  }

  /** Returns true if field urlEntities is set (has been assigned a value) and false otherwise */
  public boolean isSetUrlEntities() {
    return this.urlEntities != null;
  }

  public void setUrlEntitiesIsSet(boolean value) {
    if (!value) {
      this.urlEntities = null;
    }
  }

  public int getMentionEntitiesSize() {
    return (this.mentionEntities == null) ? 0 : this.mentionEntities.size();
  }

  public java.util.Iterator<MentionEntity> getMentionEntitiesIterator() {
    return (this.mentionEntities == null) ? null : this.mentionEntities.iterator();
  }

  public void addToMentionEntities(MentionEntity elem) {
    if (this.mentionEntities == null) {
      this.mentionEntities = new ArrayList<MentionEntity>();
    }
    this.mentionEntities.add(elem);
  }

  public List<MentionEntity> getMentionEntities() {
    return this.mentionEntities;
  }

  public Tweet setMentionEntities(List<MentionEntity> mentionEntities) {
    this.mentionEntities = mentionEntities;
    return this;
  }

  public void unsetMentionEntities() {
    this.mentionEntities = null;
  }

  /** Returns true if field mentionEntities is set (has been assigned a value) and false otherwise */
  public boolean isSetMentionEntities() {
    return this.mentionEntities != null;
  }

  public void setMentionEntitiesIsSet(boolean value) {
    if (!value) {
      this.mentionEntities = null;
    }
  }

  public int getHashtagEntitiesSize() {
    return (this.hashtagEntities == null) ? 0 : this.hashtagEntities.size();
  }

  public java.util.Iterator<HashtagEntity> getHashtagEntitiesIterator() {
    return (this.hashtagEntities == null) ? null : this.hashtagEntities.iterator();
  }

  public void addToHashtagEntities(HashtagEntity elem) {
    if (this.hashtagEntities == null) {
      this.hashtagEntities = new ArrayList<HashtagEntity>();
    }
    this.hashtagEntities.add(elem);
  }

  public List<HashtagEntity> getHashtagEntities() {
    return this.hashtagEntities;
  }

  public Tweet setHashtagEntities(List<HashtagEntity> hashtagEntities) {
    this.hashtagEntities = hashtagEntities;
    return this;
  }

  public void unsetHashtagEntities() {
    this.hashtagEntities = null;
  }

  /** Returns true if field hashtagEntities is set (has been assigned a value) and false otherwise */
  public boolean isSetHashtagEntities() {
    return this.hashtagEntities != null;
  }

  public void setHashtagEntitiesIsSet(boolean value) {
    if (!value) {
      this.hashtagEntities = null;
    }
  }

  public int getNamedEntitiesSize() {
    return (this.namedEntities == null) ? 0 : this.namedEntities.size();
  }

  public java.util.Iterator<NamedEntity> getNamedEntitiesIterator() {
    return (this.namedEntities == null) ? null : this.namedEntities.iterator();
  }

  public void addToNamedEntities(NamedEntity elem) {
    if (this.namedEntities == null) {
      this.namedEntities = new ArrayList<NamedEntity>();
    }
    this.namedEntities.add(elem);
  }

  public List<NamedEntity> getNamedEntities() {
    return this.namedEntities;
  }

  public Tweet setNamedEntities(List<NamedEntity> namedEntities) {
    this.namedEntities = namedEntities;
    return this;
  }

  public void unsetNamedEntities() {
    this.namedEntities = null;
  }

  /** Returns true if field namedEntities is set (has been assigned a value) and false otherwise */
  public boolean isSetNamedEntities() {
    return this.namedEntities != null;
  }

  public void setNamedEntitiesIsSet(boolean value) {
    if (!value) {
      this.namedEntities = null;
    }
  }

  public Language getLanguage() {
    return this.language;
  }

  public Tweet setLanguage(Language language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((User)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TweetType)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Date)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((Text)value);
      }
      break;

    case URL_ENTITIES:
      if (value == null) {
        unsetUrlEntities();
      } else {
        setUrlEntities((List<URLEntity>)value);
      }
      break;

    case MENTION_ENTITIES:
      if (value == null) {
        unsetMentionEntities();
      } else {
        setMentionEntities((List<MentionEntity>)value);
      }
      break;

    case HASHTAG_ENTITIES:
      if (value == null) {
        unsetHashtagEntities();
      } else {
        setHashtagEntities((List<HashtagEntity>)value);
      }
      break;

    case NAMED_ENTITIES:
      if (value == null) {
        unsetNamedEntities();
      } else {
        setNamedEntities((List<NamedEntity>)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((Language)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case USER:
      return getUser();

    case TYPE:
      return getType();

    case DATE:
      return getDate();

    case TEXT:
      return getText();

    case URL_ENTITIES:
      return getUrlEntities();

    case MENTION_ENTITIES:
      return getMentionEntities();

    case HASHTAG_ENTITIES:
      return getHashtagEntities();

    case NAMED_ENTITIES:
      return getNamedEntities();

    case LANGUAGE:
      return getLanguage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER:
      return isSetUser();
    case TYPE:
      return isSetType();
    case DATE:
      return isSetDate();
    case TEXT:
      return isSetText();
    case URL_ENTITIES:
      return isSetUrlEntities();
    case MENTION_ENTITIES:
      return isSetMentionEntities();
    case HASHTAG_ENTITIES:
      return isSetHashtagEntities();
    case NAMED_ENTITIES:
      return isSetNamedEntities();
    case LANGUAGE:
      return isSetLanguage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Tweet)
      return this.equals((Tweet)that);
    return false;
  }

  public boolean equals(Tweet that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_urlEntities = true && this.isSetUrlEntities();
    boolean that_present_urlEntities = true && that.isSetUrlEntities();
    if (this_present_urlEntities || that_present_urlEntities) {
      if (!(this_present_urlEntities && that_present_urlEntities))
        return false;
      if (!this.urlEntities.equals(that.urlEntities))
        return false;
    }

    boolean this_present_mentionEntities = true && this.isSetMentionEntities();
    boolean that_present_mentionEntities = true && that.isSetMentionEntities();
    if (this_present_mentionEntities || that_present_mentionEntities) {
      if (!(this_present_mentionEntities && that_present_mentionEntities))
        return false;
      if (!this.mentionEntities.equals(that.mentionEntities))
        return false;
    }

    boolean this_present_hashtagEntities = true && this.isSetHashtagEntities();
    boolean that_present_hashtagEntities = true && that.isSetHashtagEntities();
    if (this_present_hashtagEntities || that_present_hashtagEntities) {
      if (!(this_present_hashtagEntities && that_present_hashtagEntities))
        return false;
      if (!this.hashtagEntities.equals(that.hashtagEntities))
        return false;
    }

    boolean this_present_namedEntities = true && this.isSetNamedEntities();
    boolean that_present_namedEntities = true && that.isSetNamedEntities();
    if (this_present_namedEntities || that_present_namedEntities) {
      if (!(this_present_namedEntities && that_present_namedEntities))
        return false;
      if (!this.namedEntities.equals(that.namedEntities))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Tweet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrlEntities()).compareTo(other.isSetUrlEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrlEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urlEntities, other.urlEntities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMentionEntities()).compareTo(other.isSetMentionEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMentionEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mentionEntities, other.mentionEntities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHashtagEntities()).compareTo(other.isSetHashtagEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashtagEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashtagEntities, other.hashtagEntities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNamedEntities()).compareTo(other.isSetNamedEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamedEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namedEntities, other.namedEntities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(other.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, other.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Tweet(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (isSetText()) {
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
    }
    if (isSetUrlEntities()) {
      if (!first) sb.append(", ");
      sb.append("urlEntities:");
      if (this.urlEntities == null) {
        sb.append("null");
      } else {
        sb.append(this.urlEntities);
      }
      first = false;
    }
    if (isSetMentionEntities()) {
      if (!first) sb.append(", ");
      sb.append("mentionEntities:");
      if (this.mentionEntities == null) {
        sb.append("null");
      } else {
        sb.append(this.mentionEntities);
      }
      first = false;
    }
    if (isSetHashtagEntities()) {
      if (!first) sb.append(", ");
      sb.append("hashtagEntities:");
      if (this.hashtagEntities == null) {
        sb.append("null");
      } else {
        sb.append(this.hashtagEntities);
      }
      first = false;
    }
    if (isSetNamedEntities()) {
      if (!first) sb.append(", ");
      sb.append("namedEntities:");
      if (this.namedEntities == null) {
        sb.append("null");
      } else {
        sb.append(this.namedEntities);
      }
      first = false;
    }
    if (isSetLanguage()) {
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    if (date == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'date' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (user != null) {
      user.validate();
    }
    if (date != null) {
      date.validate();
    }
    if (text != null) {
      text.validate();
    }
    if (language != null) {
      language.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TweetStandardSchemeFactory implements SchemeFactory {
    public TweetStandardScheme getScheme() {
      return new TweetStandardScheme();
    }
  }

  private static class TweetStandardScheme extends StandardScheme<Tweet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Tweet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new User();
              struct.user.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = TweetType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.date = new Date();
              struct.date.read(iprot);
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.text = new Text();
              struct.text.read(iprot);
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // URL_ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.urlEntities = new ArrayList<URLEntity>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  URLEntity _elem2;
                  _elem2 = new URLEntity();
                  _elem2.read(iprot);
                  struct.urlEntities.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setUrlEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MENTION_ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.mentionEntities = new ArrayList<MentionEntity>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  MentionEntity _elem5;
                  _elem5 = new MentionEntity();
                  _elem5.read(iprot);
                  struct.mentionEntities.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setMentionEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HASHTAG_ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.hashtagEntities = new ArrayList<HashtagEntity>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  HashtagEntity _elem8;
                  _elem8 = new HashtagEntity();
                  _elem8.read(iprot);
                  struct.hashtagEntities.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setHashtagEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NAMED_ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.namedEntities = new ArrayList<NamedEntity>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  NamedEntity _elem11;
                  _elem11 = new NamedEntity();
                  _elem11.read(iprot);
                  struct.namedEntities.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setNamedEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.language = new Language();
              struct.language.read(iprot);
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Tweet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        struct.user.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        struct.date.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.text != null) {
        if (struct.isSetText()) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          struct.text.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.urlEntities != null) {
        if (struct.isSetUrlEntities()) {
          oprot.writeFieldBegin(URL_ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.urlEntities.size()));
            for (URLEntity _iter12 : struct.urlEntities)
            {
              _iter12.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mentionEntities != null) {
        if (struct.isSetMentionEntities()) {
          oprot.writeFieldBegin(MENTION_ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mentionEntities.size()));
            for (MentionEntity _iter13 : struct.mentionEntities)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.hashtagEntities != null) {
        if (struct.isSetHashtagEntities()) {
          oprot.writeFieldBegin(HASHTAG_ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hashtagEntities.size()));
            for (HashtagEntity _iter14 : struct.hashtagEntities)
            {
              _iter14.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.namedEntities != null) {
        if (struct.isSetNamedEntities()) {
          oprot.writeFieldBegin(NAMED_ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.namedEntities.size()));
            for (NamedEntity _iter15 : struct.namedEntities)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.language != null) {
        if (struct.isSetLanguage()) {
          oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
          struct.language.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TweetTupleSchemeFactory implements SchemeFactory {
    public TweetTupleScheme getScheme() {
      return new TweetTupleScheme();
    }
  }

  private static class TweetTupleScheme extends TupleScheme<Tweet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Tweet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      struct.user.write(oprot);
      oprot.writeI32(struct.type.getValue());
      struct.date.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetText()) {
        optionals.set(0);
      }
      if (struct.isSetUrlEntities()) {
        optionals.set(1);
      }
      if (struct.isSetMentionEntities()) {
        optionals.set(2);
      }
      if (struct.isSetHashtagEntities()) {
        optionals.set(3);
      }
      if (struct.isSetNamedEntities()) {
        optionals.set(4);
      }
      if (struct.isSetLanguage()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetText()) {
        struct.text.write(oprot);
      }
      if (struct.isSetUrlEntities()) {
        {
          oprot.writeI32(struct.urlEntities.size());
          for (URLEntity _iter16 : struct.urlEntities)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetMentionEntities()) {
        {
          oprot.writeI32(struct.mentionEntities.size());
          for (MentionEntity _iter17 : struct.mentionEntities)
          {
            _iter17.write(oprot);
          }
        }
      }
      if (struct.isSetHashtagEntities()) {
        {
          oprot.writeI32(struct.hashtagEntities.size());
          for (HashtagEntity _iter18 : struct.hashtagEntities)
          {
            _iter18.write(oprot);
          }
        }
      }
      if (struct.isSetNamedEntities()) {
        {
          oprot.writeI32(struct.namedEntities.size());
          for (NamedEntity _iter19 : struct.namedEntities)
          {
            _iter19.write(oprot);
          }
        }
      }
      if (struct.isSetLanguage()) {
        struct.language.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Tweet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.user = new User();
      struct.user.read(iprot);
      struct.setUserIsSet(true);
      struct.type = TweetType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.date = new Date();
      struct.date.read(iprot);
      struct.setDateIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.text = new Text();
        struct.text.read(iprot);
        struct.setTextIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.urlEntities = new ArrayList<URLEntity>(_list20.size);
          for (int _i21 = 0; _i21 < _list20.size; ++_i21)
          {
            URLEntity _elem22;
            _elem22 = new URLEntity();
            _elem22.read(iprot);
            struct.urlEntities.add(_elem22);
          }
        }
        struct.setUrlEntitiesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mentionEntities = new ArrayList<MentionEntity>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            MentionEntity _elem25;
            _elem25 = new MentionEntity();
            _elem25.read(iprot);
            struct.mentionEntities.add(_elem25);
          }
        }
        struct.setMentionEntitiesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hashtagEntities = new ArrayList<HashtagEntity>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            HashtagEntity _elem28;
            _elem28 = new HashtagEntity();
            _elem28.read(iprot);
            struct.hashtagEntities.add(_elem28);
          }
        }
        struct.setHashtagEntitiesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.namedEntities = new ArrayList<NamedEntity>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            NamedEntity _elem31;
            _elem31 = new NamedEntity();
            _elem31.read(iprot);
            struct.namedEntities.add(_elem31);
          }
        }
        struct.setNamedEntitiesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.language = new Language();
        struct.language.read(iprot);
        struct.setLanguageIsSet(true);
      }
    }
  }

}

